// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgresql"
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Currency {
    id   Int    @id @default(autoincrement())
    name String @unique

    snapshots            CurrencySnapshot[]
    users                User[]
    currencyStatistics   CurrencyStatistics?
    predictions          CurrencyPrediction[] // New association for price predictions
    correlatedCurrencies CurrencyCorrelation[]

    //testowe

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model CurrencySnapshot {
    id           Int      @id @default(autoincrement())
    volumen      BigInt
    price        Float
    marketCap    BigInt
    snapshotDate DateTime

    currencyId Int
    currency   Currency @relation(references: [id], fields: [currencyId], onDelete: Cascade)
}

model CurrencyCorrelation {
    id                   Int      @id @default(autoincrement())
    correlation          Float
    correlatedCurrencyId Int
    currencyId           Int
    Currency             Currency @relation(fields: [currencyId], references: [id])

    @@unique([correlatedCurrencyId, currencyId])
}

model CurrencyStatistics {
    id         Int   @id @default(autoincrement())
    mean       Float
    stdDev     Float
    min        Float
    max        Float
    median     Float
    quantile25 Float
    quantile50 Float
    quantile75 Float

    currencyId Int      @unique
    currency   Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
}

model CurrencyPrediction {
    id             Int      @id @default(autoincrement())
    price          Float
    predictionDate DateTime
    currencyId     Int
    currency       Currency @relation(references: [id], fields: [currencyId], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id   String  @id @default(cuid())
    role String  @default("USER")
    name String?

    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?

    accounts            Account[]
    sessions            Session[]
    favouriteCurrencies Currency[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
